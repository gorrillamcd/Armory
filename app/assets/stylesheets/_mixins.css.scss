/* ===== Rounded Corners ===== */
$default_rounded_amount: 20px;

// Round corner at position by amount.
@mixin round-corner($position, $amount: $default_rounded_amount) {
  border-#{$position}-radius: $amount;
  -webkit-border-#{$position}-radius: $amount;
}
@mixin round-corner-mozilla($position, $amount: $default_rounded_amount) {
  -moz-border-radius-#{$position}: $amount;
}

// Round left corners by amount
@mixin round-left-corners($amount: $default_rounded_amount) {
  @include round-corner("top-left", $amount);
  @include round-corner("bottom-left", $amount);
  @include round-corner-mozilla("topleft", $amount);
  @include round-corner-mozilla("bottomleft", $amount);
}

// Round right corners by amount
@mixin round-right-corners($amount: $default_rounded_amount) {
  @include round-corner("top-right", $amount);
  @include round-corner("bottom-right", $amount);
  @include round-corner-mozilla("topright", $amount);
  @include round-corner-mozilla("bottomright", $amount);
}

// Round top corners by amount
@mixin round-top-corners($amount: 5px) {
  @include round-corner("top-left", $amount);
  @include round-corner("top-right", $amount);
  @include round-corner-mozilla("topleft", $amount);
  @include round-corner-mozilla("topright", $amount);
}

// Round bottom corners by amount
@mixin round-bottom-corners($amount: $default_rounded_amount) {
  @include round-corner("bottom-left", $amount);
  @include round-corner("bottom-right", $amount);
  @include round-corner-mozilla("bottomleft", $amount);
  @include round-corner-mozilla("bottomright", $amount);
}

// Round all corners by amount
@mixin round-corners($amount: $default_rounded_amount) {
  border-radius: $amount;
  -moz-border-radius: $amount;
  -webkit-border-radius: $amount;
}

// Round bottom-side corners (either left or right)
@mixin round-any-corner($vert, $side, $amount: $default_rounded_amount) {
  @include round-corner("#{$vert}-#{$side}", $amount);
  @include round-corner-mozilla("#{$vert}#{$side}", $amount);
}

/* ===== Box-Shadow ===== */
@mixin box-shadow($x, $y, $blur, $spread, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $x $y $blur $spread $color;
    -moz-box-shadow:inset $x $y $blur $spread $color;
    box-shadow:inset $x $y $blur $spread $color;
  } @else {
    -webkit-box-shadow: $x $y $blur $spread $color;
    -moz-box-shadow: $x $y $blur $spread $color;
    box-shadow: $x $y $blur $spread $color;
  }
}

/* ===== Gradients ===== */

@mixin linear-gradient($from, $fromstop, $to, $tostop, $direction:top) {
  @if $direction==top     {background: -webkit-gradient(linear, left top,    left bottom, color-stop(0%,$from), color-stop($fromstop,$from), color-stop($tostop,$to));}
  @if $direction==bottom  {background: -webkit-gradient(linear, left bottom, left top,    color-stop(0%,$from), color-stop($fromstop,$from), color-stop($tostop,$to));}
  @if $direction==left    {background: -webkit-gradient(linear, left top,    right top,   color-stop(0%,$from), color-stop($fromstop,$from), color-stop($tostop,$to));}
  @if $direction==right   {background: -webkit-gradient(linear, right top,   left top,    color-stop(0%,$from), color-stop($fromstop,$from), color-stop($tostop,$to));}

  background: -webkit-linear-gradient($direction, $from $fromstop, $to $tostop);
  background:    -moz-linear-gradient($direction, $from $fromstop, $to $tostop);
  background:      -o-linear-gradient($direction, $from $fromstop, $to $tostop);
  background:     -ms-linear-gradient($direction, $from $fromstop, $to $tostop);
  background:         linear-gradient($direction, $from $fromstop, $to $tostop);

  filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}

/* ===== Misc Mixins ===== */
@mixin box-sizing {
  -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;
}